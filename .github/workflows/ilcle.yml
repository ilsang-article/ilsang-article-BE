name: ilcle CI/CD
on:
  push:
    branches: [ "CICD" ]
#  pull_request:
#    branches: [ "main" ]
permissions:
  contents: read
  
env:
  RESOURCE_PATH: ./src/main/resources/application.yml
  PROJECT_NAME: ilcle
  
   # Database
  DB_URL: ${{ secrets.DB_URL }}
  DB_USERNAME: ${{ secrets.DB_USERNAME }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  
  # JWT Secret
  JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}

 # AWS S3
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
  S3_REGION: ${{ secrets.AWS_REGION }}
  
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
#     - name: Build with Gradle
#       uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
#       with:
#         arguments: build
    
    - name: Generate Environment Variables File for Properties
      uses: microsoft/variable-substitution@v1
      with:
        files: ${{ env.RESOURCE_PATH }}
  
      env:
        spring.datasource.url: ${{ env.DB_URL }}
        spring.datasource.username: ${{ env.DB_USERNAME }}
        spring.datasource.password: ${{ env.DB_PASSWORD }}
        jwt.secretKey: ${{ env.JWT_SECRET_KEY }}
        cloud.aws.credentials.access-key: ${{ env.AWS_ACCESS_KEY_ID }}
        cloud.aws.credentials.secret-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
        cloud.aws.s3.bucket: ${{ env.S3_BUCKET_NAME }}
        cloud.aws.region.static: ${{ env.AWS_REGION }}
        
    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew
      shell: bash
      
    - name: Build with Gradle
      run: ./gradlew build
      shell: bash
        
        # 전송할 파일을 담을 디렉토리 생성
    - name: Make Directory for deliver
      run: mkdir deploy

    # Jar 파일 Copy
    - name: Copy Jar
      run: cp ./build/libs/*.jar ./deploy/

    # appspec.yml Copy
    - name: Copy appspec
      run: cp ./appspec.yml ./deploy/
      
    # script file Copy
    - name: Copy shell
      run: cp ./scripts/* ./deploy/

    # 압축파일 형태로 전달
    - name: Make zip file
      run: zip -r -qq -j ./$PROJECT_NAME.zip ./deploy

    # S3 Bucket으로 copy
    - name: Deliver to AWS S3
      env:
        AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
      run: aws s3 cp --region $S3_REGION --acl private ./$PROJECT_NAME.zip s3://$S3_BUCKET_NAME/
   
   # Deploy
    - name: Deploy
      env:
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
      run: aws deploy create-deployment 
        --application-name cicd
        --deployment-group-name cicd-project
        --s3-location bucket=$S3_BUCKET_NAME,bundleType=zip,key=$PROJECT_NAME.zip 
        --region $S3_REGION
        
#     - name: Make zip file
#       run: zip -r ./$GITHUB_SHA.zip .
#       shell: bash
#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v1
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: ${{ secrets.AWS_REGION }}
#     # script files 복사
#     - name: Copy script
#       run: cp ./scripts/*.sh ./deploy
#     # S3에 업로드
#     - name: Upload to S3
#       run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.zip s3://$S3_BUCKET_NAME/$PROJECT_NAME/$GITHUB_SHA.zip

#     # Deploy
#     - name: Deploy
#       run: |
#         aws deploy create-deployment \
#         --application-name cicd \
#         --deployment-config-name CodeDeployDefault.AllAtOnce \
#         --deployment-group-name cicd-project \
#         --file-exists-behavior OVERWRITE \
#         --s3-location bucket=$S3_BUCKET_NAME,bundleType=zip,key=$PROJECT_NAME/$GITHUB_SHA.zip \
#         --region ap-northeast-2 \
